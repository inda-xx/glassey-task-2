name: Dispatch

on:
  issues:
    types: [opened]

jobs:
  parse-issue-title:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.parse-title.outputs.result }}
    steps:
      - name: Parse issue title
        id: parse-title
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.API_TOKEN }}
          script: |
            const issueNumber = "${{ github.event.issue.number }}";
            const issueTitle = "${{ github.event.issue.title }}".toLowerCase();
            const prefixes = ['ama', 'hint', 'mend', 'rate', 'more'];
            let result = 'none';

            for (const prefix of prefixes) {
              if (issueTitle.startsWith(prefix)) {
                // Looks like a task for Open AI / GPT-4
                result = issueTitle;
                break;
              }
            }
            
            if(issueTitle === 'help') {
              // Provide the help options
              const issueBody = `Hej! Here's how I work. Open a new issue with a title that matches one of the following commands:
                \n\n - \`AMA\` (ask me anything): I will ask you a random question about your code
                \n - \`Hint X.Y\`: I will try to give you a hint about a particular exercise
                \n - \`Mend X.java\`: I will give you code quality tips for the given Java file
                \n - \`Rate\`: I will try to give a soft grade decision based on the task and code in the repo
                \n - \`More\`: I will invent a new exercise based on the current task
                \n\n I'll try my best to respond, but be patient as I am a bit slow 🤖`;
              
              // Update original help issue
              github.rest.issues.update({
                issue_number: issueNumber,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: issueBody,
              });
            }
            return result;
          result-encoding: string
  
  dispatch-to-handler:
    needs: [parse-issue-title]
    runs-on: ubuntu-latest
    if: needs.parse-issue-title.outputs.result != 'none'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/workflows/requirements.txt

      - name: Run handler
        continue-on-error: true
        run: |
          title="${{ needs.parse-issue-title.outputs.result }}"
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          if [[ $title == ama ]]; then
            echo "title=🤖 Answer this question about your code!" >> "$GITHUB_ENV"
            echo "body<<$EOF" >> "$GITHUB_ENV"
            find . -name "*.java" | python .github/workflows/handle_ama.py ${{ secrets.OPENAI_TOKEN }} >> "$GITHUB_ENV"
            echo "$EOF" >> "$GITHUB_ENV"
          elif [[ $title == hint* ]]; then
            echo "title=🤖 Here are some hints and tips for you!" >> "$GITHUB_ENV"
            echo "body<<$EOF" >> "$GITHUB_ENV"
            python .github/workflows/handle_hint.py ${{ secrets.OPENAI_TOKEN }} README.md "$title" >> "$GITHUB_ENV"
            echo "$EOF" >> "$GITHUB_ENV"
          elif [[ $title == mend* ]]; then
            echo "title=🤖 Here are some code quality tips!" >> "$GITHUB_ENV"
            echo "body<<$EOF" >> "$GITHUB_ENV"
            python .github/workflows/handle_mend.py ${{ secrets.OPENAI_TOKEN }} "${{ github.event.issue.title }}" >> "$GITHUB_ENV"
            echo "$EOF" >> "$GITHUB_ENV"
          elif [[ $title == more ]]; then
            echo "title=🤖 Here is a bonus exercise for you!" >> "$GITHUB_ENV"
            echo "body<<$EOF" >> "$GITHUB_ENV"
            python .github/workflows/handle_more.py ${{ secrets.OPENAI_TOKEN }} README.md >> "$GITHUB_ENV"
            echo "$EOF" >> "$GITHUB_ENV"
          elif [[ $title == rate ]]; then
            cd src
            curl -O https://repo1.maven.org/maven2/junit/junit/4.13.2/junit-4.13.2.jar
            curl -O https://repo1.maven.org/maven2/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar
            javac -cp .:junit-4.13.2.jar:hamcrest-core-1.3.jar *.java > compile.txt 2>&1 || true
            find . -name "*Test.class" | sed -e 's/\.class//g' -e 's/\.\///g' -e 's/\//\./g' | xargs -I {} java -cp .:junit-4.13.2.jar:hamcrest-core-1.3.jar org.junit.runner.JUnitCore {} >> tests.txt 2>&1 || true
            cd ..
            echo "title=🤖 Here is my soft grading decision!" >> "$GITHUB_ENV"
            echo "body<<$EOF" >> "$GITHUB_ENV"
            find . -name "*.java" | grep -v 'Test\.java$' | python .github/workflows/handle_rate.py ${{ secrets.OPENAI_TOKEN }} README.md src/compile.txt src/tests.txt >> "$GITHUB_ENV"
            echo "$EOF" >> "$GITHUB_ENV"
          fi
      
      - name: Update issue
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.API_TOKEN }}
          script: |
              github.rest.issues.update({
                issue_number: "${{ github.event.issue.number }}",
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: "${{ env.title }}",
                body: "${{ env.body }}",
              });
